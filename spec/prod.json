[
    "Write a typescript+node program called claude-source-generator",
    "Put all of the program source into a single source file index.ts.",
    "This program interfaces with Claude via Anthropic Messages to generate all source files for an entire project.",
    "The user should be able to call the resulting program as a utility script rather than requiring 'npx ts-node' etc.",
    "Generate a README.md file.",
    "Create package.json files as needed.",
    "The program should take the name of a program specification file in JSON format as a required argument.",
    "The program will maintain a manifest of all of the source files Claude expects to generate.",
    "The manifest can be stored as a JSON list of { path, description, status }.",
    "The program should start by asking claude to make an initial manifest file.",
    "- preload Claude with the full specification file",
    "- describe the manifest format",
    "- ask Claude to predict the project structure and all files that will need to be generated",
    "- parse the response from Claude containng the initial manifest and save it to a correctly formatted JSON file named ./autosrc.json",
    "The program will then enter a source generation loop.",
    "- preload Claude with all of the infomation in the program specification file.",
    "- preload Claude with the current state of the manifest from autosrc.json",
    "- ask Claude to continue generating source files, skipping any files that have already been generated per the current manifest",
    "- instruct Claude to organize its reponse as a queue of command objects:",
    "  - If Claude is adding a file to the manifest, queue an ADD command with format: { add: { path: 'path of file to be added', description: 'description of the file to be added' } }",
    "  - If Claude is rewriting a file already listed as generated in the manifest, queue an UPDATE command with format: { update: { path: 'path of file to be added', content: 'contents of generated file', why: 'reason why file is being updated' } }",
    "  - If Claude decides to remove a file already in the manifest, queue a REMOVE command with format: { remove: { path: 'path of file to be added' } }",
    "  - If Claude decides there are no more files to be added, updated, or removed, queue a FINISH command with format: { finish: 'final report once no more files need to be added, updated, or removed' }",
    "- instruct Claude to respond with the queue as a JSON array containing the queued commands",
    "- process each command in Claude's response in order",
    "  - For an ADD command, the program will simply add the path to the planned file to the manifest with status 'pending'",
    "  - For an UPDATE command, the program should update its status in the manifest to 'generated', and save the generated file contents to its intended path in the project, assuming the project base diretory is the current working dir.",
    "    Note: When saving contents for an UPDATE command, ensure that output contents do not have any garbage as the first line, e.g.: ```tsx",
    "  - For a REMOVE command, the program should update its status in the manifest to 'delete', and remove the generated file from its path in the project, assuming the project base diretory is the current working dir.",
    "  - For a FINISH command, the program should exit, printing the final report to stdout",
    "  - For any command, if the manifest is updated, save the manifest to ./autosrc.json",
    "- if no FINISH command has been encountered, the program should ask claude to continue where it left off.",
    "Please generate each source file for claude-source-generator in a separate artifact."
]
